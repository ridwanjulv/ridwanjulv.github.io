The Code Review Pyramid


# Level 1: Code Style
Questions to ask: 
- Is the project's formatting style applied? 
— Does it adhere to agreed on naming conventions
- Is it DRY?
- Is the code sufficiently "readable" (method lengths, etc)

# Level 2: Tests 
Questions to ask; 
- Are all tests passing? 
- Are new features reasonably tested? 
- Are corner cases tested? 
- Is it using unit tests where possible, integration tests where necessary? 
- Are there tests for NFR (e.g. performances?)

> Try to automate Level 1 & Level 2 above. Focus your effort on higher levels below (higher level need more effort).

# Level 3: Documentation
Questions to ask:
- New features reasonably documented?
- Are the relevant kinds of docs covered: README, API docs, user guide, reference docs, etc.? 
- Are docs understandable? are there no significant typos and grammer mistakes?

# Level 4: Implementation Semantics
Questions to ask:
- Does it satisfy the original requirements? 
- Is it logically correct? 
- Is there no unnecessary complexity? 
- Is it robust (no concurrency issues, proper error handling, etc.)? 
- Is it performance?
- Is it secure? no SQL injections, etc.) 
- Is it observable? (metrics, logging, tracing, etc.)? 
— Do newly added dependencies pulling their weight? Is their licenses acceptable?

# Level 5: API Semantics
Questions to ask:
- API as small as possible, as large as needed
- Is there one way of doing things, not multiple ones?
- Is it consistent, does it follow the principle of least surprises? 
— Clean split of API/internals, without internal leaking in the API?
- Are there no breaking changes to user facing parts? (API classes, configurations, metrics, log formats, etc)?
- Is a new API generally useful and not overly specifics?
